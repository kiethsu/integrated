<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="Cache-Control" content="no-store" />
<meta http-equiv="Pragma" content="no-cache" />
<meta http-equiv="Expires" content="0" />
  <title>Admin Dashboard - Pet List</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      height: 100vh;
      background-color: #f5f5f5;
    }

    .container {
      display: flex;
      width: 100%;
      height: 100vh;
    }

    .sidebar {
      width: 15%;
      background-color: #004AAD;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      transition: width 0.3s ease;
    }

    .sidebar.collapsed {
      width: 60px;
      padding: 10px;
    }

    .sidebar img {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      margin-bottom: 15px;
      border: 3px solid #fff;
      transition: transform 0.3s ease;
    }

    .sidebar.collapsed img {
      transform: scale(0);
    }

    .sidebar h2 {
      font-size: 16px;
      margin-bottom: 30px;
      color: white;
      transition: transform 0.3s ease;
    }

    .sidebar.collapsed h2 {
      transform: scale(0);
    }

    .sidebar a {
      text-decoration: none;
      color: white;
      font-size: 16px;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      width: 100%;
      padding-left: 15px;
      transition: transform 0.3s ease;
    }

    .sidebar.collapsed a {
      transform: scale(0);
    }

    .sidebar a:hover {
      background-color: #3a9a90;
      border-radius: 5px;
    }

    .sidebar a i {
      margin-right: 10px;
    }

    .sidebar-toggle {
      position: absolute;
      top: 20px;
      left: 20px;
      background-color: #004AAD;
      border: none;
      color: white;
      cursor: pointer;
      font-size: 18px;
      padding: 10px;
    }

    .main-section {
      width: 85%;
      padding: 40px;
      transition: width 0.3s ease;
    }

    .sidebar.collapsed + .main-section {
      width: 95%;
    }

    /* Flexbox for Search and Add Pet button */
    .action-section {
      display: flex;
      justify-content: space-between;
      align-items: center; /* Align items vertically */
      margin-bottom: 20px;
      width: 100%; /* Full width for alignment */
    }

    .add-pet-button {
      background-color: white;
      color: black;
      padding: 10px 20px;
      border: 1px solid #ccc;
      border-radius: 5px;
      cursor: pointer;
      margin-right: 10px;
      white-space: nowrap; /* Prevent button text from wrapping */
    }

    .search-section {
      display: flex;
      align-items: center;
      width: 100%; /* Let the search box take up the rest of the available space */
    }

    .search-section input {
      padding: 10px;
      background-color: white;
      border: 1px solid #ccc;
      border-radius: 5px;
      width: 100%; /* Allow search box to take available space */
      flex-grow: 1;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      padding: 12px;
      text-align: center;
    }

    th {
      background-color: #004AAD;
      color: white;
      font-weight: bold;
    }

    td {
      color: black;
    }

    tr:nth-child(odd) {
      background-color: #FAF8F8;
    }

    tr:nth-child(even) {
      background-color: white;
    }

    tr:hover {
      background-color: #e0e0e0;
    }

    .button-link {
      text-decoration: none;
      color: white;
      background-color: #E1B61B;
      padding: 6px 10px;
      border-radius: 5px;
      cursor: pointer;
      display: inline-block;
    }

    .button-link:hover {
      background-color: #8FD0B3;
    }

     /* Modal styles */
     .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      backdrop-filter: blur(4px);
      justify-content: center;
      align-items: center;
      transition: opacity 0.3s ease;
      overflow-y: auto;
    }

    .modal-content {
      background-color: white;
      padding: 25px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
      position: relative;
      animation: fadeIn 0.3s ease;
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    /* Button styling for modal */
    .modal-button {
      padding: 12px;
      background-color: #004AAD;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      transition: background-color 0.3s ease;
    }

    .modal-button:hover {
      background-color: #002f75;
    }

    /* Close button styling */
    .modal-close {
      position: absolute;
      top: 10px;
      right: 15px;
      color: #aaa;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }

    .modal-close:hover {
      color: black;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    /* Styles for history modal and inner table */
    .history-table {
      width: 100%;
      margin-top: 20px;
      border-collapse: collapse;
    }

    .history-table th, .history-table td {
      padding: 10px;
      text-align: center;
      border: 1px solid #ddd;
    }

    .history-table th {
      background-color: #4dbdb7;
      color: white;
    }

    .add-history-button {
      background-color: #4dbdb7;
      color: white;
      padding: 10px 20px;
      margin-top: 20px;
      cursor: pointer;
      border: none;
      border-radius: 5px;
    }

    /* Pagination styles */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 20px;
    }

    .pagination a {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 30px;
      height: 30px;
      margin: 0 5px;
      text-decoration: none;
      background-color: #f1f1f1;
      border: 1px solid #ddd;
      border-radius: 5px;
      color: #333;
      font-size: 16px;
    }

    .pagination a.active {
      background-color: #004AAD;
      color: white;
      border-color: #333;
    }

    .pagination a:hover {
      background-color: #e0e0e0;
    }

    .pagination a.disabled {
      background-color: #ccc;
      pointer-events: none;
    }

     /* Form styling within modal */
     form {
      display: flex;
      flex-direction: column;
      gap: 15px;
      width: 100%;
    }

    label {
      font-weight: bold;
    }

    input[type="text"],
    input[type="date"],
    input[type="file"],
    select,
    textarea {
      width: 100%;
      padding: 12px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
      box-sizing: border-box;
    }

    input[type="text"],
    input[type="date"],
    input[type="file"],
    select {
      height: 45px;
    }

    textarea {
      resize: vertical;
      min-height: 100px;
    }

    .modal-button {
      padding: 12px;
      background-color: #004AAD;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      transition: background-color 0.3s ease;
    }

    .modal-button:hover {
      background-color: #002f75;
    }

  </style>
</head>
<body>
  <div class="container">
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
      <button class="sidebar-toggle" onclick="toggleSidebar()">â˜°</button>
      <img src="https://via.placeholder.com/80" alt="Admin Profile Picture">
      <h2>ADMIN</h2>
      <a href="/admin/dashboard"><i class="fas fa-sign-out-alt"></i> Dashboard</a>
      <a href="/admin/reservations"><i class="fas fa-list"></i> Reservations</a>
      <a href="/admin/history"><i class="fas fa-history"></i> History</a>
      <a href="/admin/petlist"><i class="fas fa-paw"></i> Pet List</a>
      <a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
    </div>

    <div class="main-section">
      <h1>Pet List</h1>

      <!-- Success message -->
      <% if (typeof success !== 'undefined' && success === '1') { %>
        <div class="success-message">
          Pet has been added successfully!
        </div>
      <% } %>

      <!-- Action Section (Add Pet + Search) -->
      <div class="action-section">
        <button class="add-pet-button" onclick="showAddPetModal()">Add Pet</button>
        <!-- Updated Search Section -->
<div class="search-section">
  <form action="/admin/petlist" method="get" style="width: 100%;">
    <input
      type="text"
      id="search-box"
      name="searchQuery"
      placeholder="Search by owner name..."
      value="<%= searchQuery || '' %>"
      class="search-input"
    />
  </form>
</div>

      </div>

      <table>
        <tr>
          <th>Pet Name</th>
          <th>Breed</th>
          <th>Owner Name</th>
          <th>Birthday</th>
          <th>Vet Card</th>
          <th>Edit</th>
          <th>Delete</th>
          <th>Pet History</th>
        </tr>

        <% pets.forEach(pet => { %>
        <tr>
          <td><%= pet.petName %></td>
          <td><%= pet.breed %></td>
          <td><%= pet.ownerName %></td>
          <td><%= pet.birthday ? new Date(pet.birthday).toLocaleDateString() : 'N/A' %></td>
          <td>
            <% if (pet.vetCard) { %>
              <a href="/uploads/<%= pet.vetCard %>" target="_blank" class="button-link">View Vet Card</a>
            <% } else { %>
              No vet card
            <% } %>
          </td>
          <td>
            <button type="button" class="button-link" style="background-color: blue;" 
              onclick="showEditPetModal('<%= pet._id %>', '<%= pet.ownerName ? pet.ownerName.replace(/'/g, '&#39;') : '' %>', '<%= pet.birthday ? new Date(pet.birthday).toISOString().substring(0, 10) : '' %>')">
              Edit
            </button>
          </td>
          <td>
            <% console.log("Pet ID:", pet._id); %>
            <form action="/admin/delete-pet/<%= pet._id.toString() %>" method="POST" onsubmit="return confirmDelete()">
              <button type="submit" class="button-link" style="background-color: red;">Delete</button>
            </form>
            
          </td>
          <td>
            <button class="button-link" onclick="showHistoryModal('<%= pet._id %>', <%= JSON.stringify(pet.history) %>)">View History</button>
          </td>
        </tr>
        <% }) %>
      </table>

     <!-- Pagination Section -->
      <div class="pagination">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>">&laquo;</a>
        <% } else { %>
          <a class="disabled">&laquo;</a>
        <% } %>

        <% for (let i = 1; i <= totalPages; i++) { %>
          <a href="?page=<%= i %>" class="<%= currentPage === i ? 'active' : '' %>"><%= i %></a>
        <% } %>

        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>">&raquo;</a>
        <% } else { %>
          <a class="disabled">&raquo;</a>
        <% } %>
      </div>

    </div>
  </div>

  <div id="addPetModal" class="modal">
    <div class="modal-content">
      <span class="modal-close" onclick="closeAddPetModal()">&times;</span>
      <h2>Add New Pet</h2>
      <form action="/admin/add-pet" method="POST">
        <label for="petName">Pet Name</label>
        <input type="text" name="petName" id="petName" required>
        
        <label for="breed">Breed</label>
        <input type="text" name="breed" id="breed" required>
        
        <label for="ownerName">Owner Name</label>
        <input type="text" name="ownerName" id="ownerName" required>
        
        <label for="birthday">Birthday (Optional)</label>
        <input type="date" name="birthday" id="birthday">
        
        <button type="submit" class="modal-button">Add Pet</button>
      </form>
    </div>
  </div>
  
  
  <div id="editPetModal" class="modal">
    <div class="modal-content">
      <span class="modal-close" onclick="closeEditPetModal()">&times;</span>
      <h2>Edit Pet</h2>
      <form action="/admin/edit-pet" method="POST" enctype="multipart/form-data">
        <input type="hidden" name="petId" id="editPetId">
        
        <label for="editOwnerName">Owner Name</label>
        <input type="text" name="ownerName" id="editOwnerName" required>
        
        <label for="editBirthday">Birthday (Optional)</label>
        <input type="date" name="birthday" id="editBirthday">
        
        <label for="editVetCard">Upload Vet Card (Optional)</label>
        <input type="file" name="vetCard" id="editVetCard">
        
        <button type="submit" class="modal-button">Save Changes</button>
      </form>
    </div>
  </div>
  

 <!<!-- View History Modal -->
 <div id="historyModal" class="modal">
   <div class="modal-content">
     <span class="modal-close" onclick="closeHistoryModal()">&times;</span>
     <h2>Pet History</h2>
     <input type="hidden" id="historyPetId"> <!-- Hidden field to store pet ID -->
     
     <!-- History Table -->
     <table class="history-table">
       <thead>
         <tr>
           <th>Date</th>
           <th>Notes</th>
           <th>Update</th>
           <th>Delete</th>
         </tr>
       </thead>
       <tbody id="historyTableBody">
         <!-- History entries will be dynamically populated here -->
       </tbody>
     </table>
     
     <!-- Pagination Controls -->
     <div id="historyPagination" class="pagination"></div>
     
    <button class="add-history-button" onclick="showAddHistoryModal()">Add</button>
   </div>
 </div>
 
   

<!-- Add/Update History Modal -->
<div id="addHistoryModal" class="modal">
  <div class="modal-content">
    <span class="modal-close" onclick="closeAddHistoryModal()">&times;</span>
    <h2 id="historyModalTitle">Add History</h2>
    <form onsubmit="saveHistory(); return false;">
      <label for="historyDate">Date</label>
      <input type="date" id="historyDate" required>
      
      <label for="historyNotes">Notes</label>
      <textarea id="historyNotes" placeholder="Enter Notes" required></textarea>
      
      <input type="hidden" id="historyEntryId">
      
      <button type="submit" class="modal-button">Save</button>
    </form>
  </div>
</div>

<!-- Note Viewing Modal -->
<div id="viewNoteModal" class="modal">
  <div class="modal-content">
    <span class="modal-close" onclick="closeViewNoteModal()">&times;</span>
    <h2>Note Details</h2>
    <p id="noteContent"></p>
  </div>
</div>


<!-- Delete Confirmation Modal -->
<div id="deleteConfirmationModal" class="modal">
  <div class="modal-content">
    <span class="modal-close" onclick="closeDeleteConfirmationModal()">&times;</span>
    <h2>Are you sure you want to delete this entry?</h2>
    <button class="modal-button" onclick="confirmDeleteHistory()">Yes, Delete</button>
    <button class="modal-button" onclick="closeDeleteConfirmationModal()">Cancel</button>
    <input type="hidden" id="deleteEntryId">
  </div>
</div>




  <script>
 // Show Add Pet Modal
function showAddPetModal() {
  document.getElementById("addPetModal").style.display = "flex";
}

// Close Add Pet Modal
function closeAddPetModal() {
  document.getElementById("addPetModal").style.display = "none";
}

// Show Edit Pet Modal
function showEditPetModal(petId, ownerName, birthday) {
  document.getElementById('editPetId').value = petId;
  document.getElementById('editOwnerName').value = ownerName;
  document.getElementById('editBirthday').value = birthday ? new Date(birthday).toISOString().substring(0, 10) : '';
  document.getElementById('editPetModal').style.display = 'flex';
}

// Close Edit Pet Modal
function closeEditPetModal() {
  document.getElementById('editPetModal').style.display = 'none';
}

// Show View History Modal
function showHistoryModal(petId, history) {
  document.getElementById('historyPetId').value = petId; // Set the pet ID in the hidden field
  const historyTableBody = document.getElementById('historyTableBody');
  historyTableBody.innerHTML = ''; // Clear any previous history

  // Populate the table with existing history
  history.forEach((entry, index) => {
    const newRow = document.createElement('tr');
    newRow.innerHTML = `
      <td>${new Date(entry.date).toLocaleDateString()}</td>
      <td><button onclick="showViewNoteModal('${entry.note}')">View Note</button></td>
      <td><button onclick="showUpdateHistoryModal('${entry._id}', '${entry.note}', '${new Date(entry.date).toISOString().substring(0, 10)}')">Update</button></td>
      <td><button onclick="showDeleteConfirmationModal('${entry._id}')">Delete</button></td>
    `;
    historyTableBody.appendChild(newRow);
  });

  document.getElementById('historyModal').style.display = 'flex'; // Open History Modal
}

// Show the Add/Update History modal
function showAddHistoryModal() {
  document.getElementById('historyModalTitle').textContent = "Add History";
  document.getElementById('historyDate').value = '';
  document.getElementById('historyNotes').value = '';
  document.getElementById('historyEntryId').value = ''; // Clear any entry ID (for new entries)
  document.getElementById('addHistoryModal').style.display = 'flex'; // Open Add History Modal
}

// Show the Update History modal
function showUpdateHistoryModal(entryId, note, date) {
  document.getElementById('historyModalTitle').textContent = "Update History";
  document.getElementById('historyDate').value = date;
  document.getElementById('historyNotes').value = note;
  document.getElementById('historyEntryId').value = entryId; // Set the entry ID for updates
  document.getElementById('addHistoryModal').style.display = 'flex'; // Open Add History Modal
}

// Close History Modal
function closeHistoryModal() {
  document.getElementById('historyModal').style.display = 'none';
}

// Show Note Modal
function showViewNoteModal(note) {
  const noteModal = document.getElementById('viewNoteModal');
  const noteContent = document.getElementById('noteContent');
  
  // Set the note content
  noteContent.textContent = note;

  // Display the modal
  noteModal.style.display = 'flex';
}

// Close Note Modal
function closeViewNoteModal() {
  document.getElementById('viewNoteModal').style.display = 'none';
}

// Close the Add/Update History modal
function closeAddHistoryModal() {
  document.getElementById('addHistoryModal').style.display = 'none';
}

// Save (Add or Update) history
function saveHistory() {
  const petId = document.getElementById('historyPetId').value; // Get Pet ID from hidden field
  const historyDate = document.getElementById('historyDate').value; // Get date input
  const historyNotes = document.getElementById('historyNotes').value; // Get notes input
  const entryId = document.getElementById('historyEntryId').value; // Get entry ID for updates

  const url = entryId ? `/admin/update-history/${entryId}` : `/admin/add-history/${petId}`;
  const method = entryId ? 'PUT' : 'POST';

  // Make the fetch request
  fetch(url, {
    method: method,
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ date: historyDate, note: historyNotes }) // Send the data
  })
  .then(response => {
    console.log('Fetch response status:', response.status);
    return response.json();  // Parse the response as JSON
  })
  .then(data => {
    console.log('Server response:', data);  // Log the server's response
    if (data.success) {
      location.reload(); // Refresh the page or re-render the history list after saving
      closeAddHistoryModal();
    } else {
      alert('Error saving history: ' + data.message);  // Display the error message from the server
    }
  })
  .catch(err => {
    console.error('Fetch error:', err);
    alert('Failed to save history. Please try again.');
  });
}

// Show Delete Confirmation Modal
function showDeleteConfirmationModal(entryId) {
  document.getElementById('deleteEntryId').value = entryId;
  document.getElementById('deleteConfirmationModal').style.display = 'flex';
}

// Confirm Deletion
function confirmDeleteHistory() {
  const entryId = document.getElementById('deleteEntryId').value;

  // Make the delete request
  fetch(`/admin/delete-history/${entryId}`, {
    method: 'DELETE',
  })
  .then(response => {
    console.log('Delete response status:', response.status);
    return response.json();
  })
  .then(data => {
    if (data.success) {
      location.reload(); // Refresh the page or re-render the history list after deletion
      closeDeleteConfirmationModal();
    } else {
      alert('Error deleting history: ' + data.message);
    }
  })
  .catch(err => {
    console.error('Delete fetch error:', err);
    alert('Failed to delete history. Please try again.');
  });
}

// Close Delete Confirmation Modal
function closeDeleteConfirmationModal() {
  document.getElementById('deleteConfirmationModal').style.display = 'none';
}

// Sidebar Toggle
function toggleSidebar() {
  const sidebar = document.getElementById('sidebar');
  const mainSection = document.querySelector('.main-section');

  sidebar.classList.toggle('collapsed');
  if (sidebar.classList.contains('collapsed')) {
    mainSection.style.width = '95%';
  } else {
    mainSection.style.width = '85%';
  }
}

// Close modals if clicked outside
window.onclick = function(event) {
  if (event.target == document.getElementById("addPetModal")) {
    closeAddPetModal();
  }
  if (event.target == document.getElementById("editPetModal")) {
    closeEditPetModal();
  }
  if (event.target == document.getElementById("historyModal")) {
    closeHistoryModal();
  }
  if (event.target == document.getElementById("addHistoryModal")) {
    closeAddHistoryModal();
  }
  if (event.target == document.getElementById("viewNoteModal")) {
    closeViewNoteModal();
  }
  if (event.target == document.getElementById("deleteConfirmationModal")) {
    closeDeleteConfirmationModal();
  }
}
function confirmDelete() {
    return confirm("Are you sure you want to delete this pet?");
  }
 
  // Variables to store pagination state
  let currentHistoryPage = 1;
  const itemsPerPage = 5;
  let historyData = []; // Global variable to store history data for pagination

  // Function to display history based on current page
  function displayHistory() {
    const historyTableBody = document.getElementById('historyTableBody');
    historyTableBody.innerHTML = '';

    // Calculate the start and end index based on the current page
    const start = (currentHistoryPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const paginatedHistory = historyData.slice(start, end);

    // Render the current page of history entries
    paginatedHistory.forEach((entry) => {
      const newRow = document.createElement('tr');
      newRow.innerHTML = `
        <td>${new Date(entry.date).toLocaleDateString()}</td>
        <td><button onclick="showViewNoteModal('${entry.note}')">View Note</button></td>
        <td><button onclick="showUpdateHistoryModal('${entry._id}', '${entry.note}', '${new Date(entry.date).toISOString().substring(0, 10)}')">Update</button></td>
        <td><button onclick="showDeleteConfirmationModal('${entry._id}')">Delete</button></td>
      `;
      historyTableBody.appendChild(newRow);
    });

    // Update pagination controls
    renderPaginationControls();
  }

  // Function to render pagination controls
  function renderPaginationControls() {
    const totalPages = Math.ceil(historyData.length / itemsPerPage);
    const paginationContainer = document.getElementById('historyPagination');
    paginationContainer.innerHTML = '';

    // Previous button
    if (currentHistoryPage > 1) {
      const prevButton = document.createElement('a');
      prevButton.textContent = 'Â«';
      prevButton.onclick = () => { 
        currentHistoryPage--; 
        displayHistory(); 
      };
      paginationContainer.appendChild(prevButton);
    }

    // Page number buttons
    for (let i = 1; i <= totalPages; i++) {
      const pageButton = document.createElement('a');
      pageButton.textContent = i;
      pageButton.className = i === currentHistoryPage ? 'active' : '';
      pageButton.onclick = () => { 
        currentHistoryPage = i; 
        displayHistory(); 
      };
      paginationContainer.appendChild(pageButton);
    }

    // Next button
    if (currentHistoryPage < totalPages) {
      const nextButton = document.createElement('a');
      nextButton.textContent = 'Â»';
      nextButton.onclick = () => { 
        currentHistoryPage++; 
        displayHistory(); 
      };
      paginationContainer.appendChild(nextButton);
    }
  }

  // Function to show history modal with pagination
  function showHistoryModal(petId, history) {
    document.getElementById('historyPetId').value = petId;
    historyData = history; // Set the global history data for pagination
    currentHistoryPage = 1; // Reset to the first page
    displayHistory(); // Display the first page
    document.getElementById('historyModal').style.display = 'flex';
  }
  // Search on typing
  document.getElementById('search-box').addEventListener('input', function() {
  this.form.submit();
});

    </script>
</body>
</html>
